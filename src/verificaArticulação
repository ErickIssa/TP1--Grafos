from collections import defaultdict

class grafo:
    def __init__(self, vertices):
        self.V = vertices
        self.grafo = defaultdict(list)  # lista de adjacência
        self.time = 0                   # contador de tempo DFS (feito pelo algoritmo de referência)
        self.articulaçoes = set()


    def adiciona_vertice(self, u, v):
        self.grafo[u].append(v)
        self.grafo[v].append(u)

    def dfs(self, u, visitados, pai, profundidade, low):
        filhos = 0
        visitados[u] = True
        self.time += 1
        profundidade[u] = low[u] = self.time

        for v in self.grafo[u]:
            if not visitados[v]:
                pai[v] = u
                filhos += 1
                self.dfs(v, visitados, pai, profundidade, low)

                # Atualiza o low[u] considerando o filho
                low[u] = min(low[u], low[v])

                # Condições para ponto de articulação
                if pai[u] is None and filhos > 1:
                    self.articulaçoes.add(u)
                if pai[u] is not None and low[v] >= profundidade[u]:
                    self.articulaçoes.add(u)

            elif v != pai[u]:
                # Atualiza o low[u] com o pai alcançável
                low[u] = min(low[u], profundidade[v])

    def encontraArticulacao(self):
        visitados = [False] * self.V
        pai = [None] * self.V
        profundidade = [float("inf")] * self.V
        low = [float("inf")] * self.V

        for i in range(self.V):
            if not visitados[i]:
                self.dfs(i, visitados, pai, profundidade, low)
        return self.articulaçoes
    
    def verificaConectividade(self, start=0):
        visitados = [False] * self.V
        pai = [None] * self.V
        vertices = []

        def dfs(u):
            visitados[u] = True
            for v in self.grafo[u]:
                if not visitados[v]:
                    pai[v] = u
                    vertices.append((u, v))
                    dfs(v)

        dfs(start)

        conectados = all(visitados)
        return vertices, pai, conectados

if __name__ == "__main__":
    g = grafo(6)
    g.adiciona_vertice(0, 1)
    g.adiciona_vertice(0, 2)
    g.adiciona_vertice(1, 2)
    g.adiciona_vertice(1, 3)
    g.adiciona_vertice(3, 4)
    g.adiciona_vertice(3, 5)

    aps = g.encontraArticulacao()
    print("Pontos de articulação:", aps)

    g1 = grafo(5)
    g1.adiciona_vertice(0, 1)
    g1.adiciona_vertice(1, 2)
    g1.adiciona_vertice(2, 3)
    g1.adiciona_vertice(3, 4)

    vertices, pai, conectados = g1.verificaConectividade(0)
    #print("Árvore DFS (arestas):", vertices)
    print("O grafo é conexo?", conectados)

    # Grafo desconexo
    g2 = grafo(5)
    g2.adiciona_vertice(0, 1)
    g2.adiciona_vertice(2, 3)

    vertices, pai, conectados = g2.verificaConectividade(0)
    #print("\nÁrvore DFS (arestas):", vertices)
    print("O grafo é conexo?", conectados)